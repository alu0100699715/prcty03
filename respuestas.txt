18. Puts "Hola Mundo", saca por pantalla la cadena hola mundo seguido de un salto de línea.

21. En el caso de "\t\n" sale por pantalla "\t\n", en cambio en el caso de '\t\n'sale "\\t\\n"

22.%q es igual a poner comillas simples. la salida a %q{hello world\n} es "hello world\n" y a %q{’a’ ’b’ ’c’} es "'a', 'b' , 'c'" .

23.%Q es igual a poner dobles comillas. la salida a %Q{hello world\n} es hello world con un salto de línea. La salida a s %Q{"a" "b" "c"} es "a" "b" "c".

24.En la variable se se guarda: "--4--\n--2--\n". 

25.Se guarda: "--\#{a}--\n--\#{b}--\n".

26. s[0,2]= "he", s[-1,1]="o" ,  s[0,10]="hello".

27.En g queda "hello world".

28.En e queda "...".

29.El resultado es "222".

30. Con %w[this is a test] es equivalente a poner cada palabra entre comillas simples. Así que no se interpreta ningún operandos o variables.

31.Con %w[\t \n] es equivalente a poner cada palabra entre comillas si
mples. Así que no se interpreta ningún operandos o variables.

32.Con %W[\t \n] es equivalente a poner cada palabra entre comillas dobles por lo tanto se interpretan operandos o variables.

33.Nils es un array de 3 miembros que contiene [nil,nil,nil].

34.Zeros es un array de 3 miembros que contiene [0,0,0].

35.En b se crea un array x, definido previamente.

36.En c que un array con miembros, [0, 2, 4].

37.a[1,1]=["b"],a[-2,2]=["d", "e"],a[0..2]= ["a", "b", "c"],a[0...1]=["a"], a[-2..-1]=["d", "e"].

38.Primera vez: a=["A", "B", "c", "d", "e"]. Segunda vez: a= ["A", "B", "C", "D", "E"] . Tercera vez: a=[1, 2, 3, "A", "B", "C", "D", "E"]. Cuarta vez: a=[3, "A", "B", "C", "D", "E"].Quinta vez: a=[3, "A", "B", "C", "D", "Z"] . Sexta vez: a=[3, "A", "B", "C", nil].

39.a=(1...4).to_a da  [1, 2, 3] , a=a+[4,5] da [1, 2, 3, 4, 5], a += [[6, 7, 8]]
da [1, 2, 3, 4, 5, [6, 7, 8]].

40.x=%w{a b c b a} da ["a", "b", "c", "b", "a"] , x=x-%w{b c d} da ["a", "a"].

41.z=[0]*8 = [0, 0, 0, 0, 0, 0, 0, 0].

42. a << 1 => [1] ,  a << 2 << 3  => [1, 2, 3] , a <<[4,5,6] => [1, 2, 3, [4, 5, 6]] , a.concat [7,8]  => [1, 2, 3, [4, 5, 6], 7, 8].

43.c=a|b => [1, 2, 3, 4, 5] , e=a&b => [2, 3, 4] , f=b&a => [4, 3, 2].

44.a.to_a => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], b.to_a => [1, 2, 3, 4, 5, 6, 7, 8, 9] , b.include? 10 => false, b.include? => true, b.step(2){|x| print "#{x} "} 1 3 5 7 9  => 1...10, no lo reconoce el intérprete.

45. r.member? 50 => true , r.include? 99.9 => true , r.member? 99.9  => true.

46.true.class => TrueClass , false.class => FalseClass , puts "hello" if 0 da
hello => nil,  puts "hello" if nil => nil, puts "hello" if "" da hello
 => nil    
    
47.x.class => Symbol,  x == 'sym' => false, x==:sym => true, z.class => Symbol,
x == 'sym'.to_sym => true, x.to_s == 'sym' => true.

48.print s da Rub  => nil, print s,t da Rub Java => nil.

49. "%d %s" %[3,"rubies"] => "3 rubies". 
 
50. x,y=4,5 => [4, 5], z=x > y ? x :y  => 5 , x,y,z=[1,2,3]  => [1, 2, 3].

51. x.keys => [:a, :b] , x.values => [1, 2],  x => {:a=>1, :b=>2, :c=>3} , x => {:a=>1, :b=>2, :c=>3} , x => {:b=>2, :c=>3} , x.delete_if {|k,v| v % 2 == 0} => {:a=>1} , x => {:a=>1}.

52.Nos aparece un error, esto es así ya que no hay un bloque que ejecutar.

53.Ambas crean un hash vacío. No hay diferencia alguna.

54.'hello world, hello LPP'.scan /\w+/ => ["hello", "world", "hello", "LPP"].

55. Ordena las claves del hash, crando c y las muestra después por pantalla.
  


 
  
 
444: 
